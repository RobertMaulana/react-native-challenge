// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Home /> should render correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Styled(Container)
    virtual={undefined}
>
    <Styled(Container)
        virtual={undefined}
    >
        <Styled(Content)
            virtual={undefined}
        >
            <Styled(Spinner)
                color="orange"
                virtual={undefined}
            />
        </Styled(Content)>
    </Styled(Container)>
    <Styled(Container)
        style={
            Object {
                "padding": 5,
              }
        }
        virtual={undefined}
    >
        <Styled(Content)
            virtual={undefined}
        >
            <ScrollViewMock>
                <Styled(List)
                    virtual={undefined}
                >
                    
                </Styled(List)>
            </ScrollViewMock>
        </Styled(Content)>
    </Styled(Container)>
</Styled(Container)>,
  "nodes": Array [
    <Styled(Container)
      virtual={undefined}
>
      <Styled(Container)
            virtual={undefined}
      >
            <Styled(Content)
                  virtual={undefined}
            >
                  <Styled(Spinner)
                        color="orange"
                        virtual={undefined}
                  />
            </Styled(Content)>
      </Styled(Container)>
      <Styled(Container)
            style={
                  Object {
                        "padding": 5,
                      }
            }
            virtual={undefined}
      >
            <Styled(Content)
                  virtual={undefined}
            >
                  <ScrollViewMock>
                        <Styled(List)
                              virtual={undefined}
                        >
                              
                        </Styled(List)>
                  </ScrollViewMock>
            </Styled(Content)>
      </Styled(Container)>
</Styled(Container)>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Home
        collections={Array []}
        navigation={
                Object {
                        "navigate": Array [],
                      }
        }
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Home {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "collections": Array [],
          "navigation": Object {
            "navigate": Array [],
          },
        },
        "refs": Object {},
        "state": Object {
          "collections": Array [],
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Styled(Container)
          virtual={undefined}
>
          <Styled(Container)
                    virtual={undefined}
          >
                    <Styled(Content)
                              virtual={undefined}
                    >
                              <Styled(Spinner)
                                        color="orange"
                                        virtual={undefined}
                              />
                    </Styled(Content)>
          </Styled(Container)>
          <Styled(Container)
                    style={
                              Object {
                                        "padding": 5,
                                      }
                    }
                    virtual={undefined}
          >
                    <Styled(Content)
                              virtual={undefined}
                    >
                              <ScrollViewMock>
                                        <Styled(List)
                                                  virtual={undefined}
                                        >
                                                  
                                        </Styled(List)>
                              </ScrollViewMock>
                    </Styled(Content)>
          </Styled(Container)>
</Styled(Container)>,
        "_debugID": 2,
        "_renderedOutput": <Styled(Container)
          virtual={undefined}
>
          <Styled(Container)
                    virtual={undefined}
          >
                    <Styled(Content)
                              virtual={undefined}
                    >
                              <Styled(Spinner)
                                        color="orange"
                                        virtual={undefined}
                              />
                    </Styled(Content)>
          </Styled(Container)>
          <Styled(Container)
                    style={
                              Object {
                                        "padding": 5,
                                      }
                    }
                    virtual={undefined}
          >
                    <Styled(Content)
                              virtual={undefined}
                    >
                              <ScrollViewMock>
                                        <Styled(List)
                                                  virtual={undefined}
                                        >
                                                  
                                        </Styled(List)>
                              </ScrollViewMock>
                    </Styled(Content)>
          </Styled(Container)>
</Styled(Container)>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Home
    collections={Array []}
    navigation={
        Object {
            "navigate": Array [],
          }
    }
/>,
}
`;

exports[`pressed 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Styled(List)
    virtual={undefined}
>
    <TouchableOpacity
        activeOpacity={0.2}
        focusedOpacity={0.7}
        onPress={[Function]}
        style={
            Object {
                "borderBottomColor": "#d0d4db",
                "borderBottomWidth": 1,
                "flexDirection": "row",
                "marginBottom": 5,
                "paddingBottom": 5,
              }
        }
    >
        <Styled(Thumbnail)
            size={80}
            source={
                Object {
                    "uri": "",
                  }
            }
            square={true}
            virtual={undefined}
        />
        <Styled(Body)
            style={
                Object {
                    "alignItems": "flex-start",
                    "paddingLeft": 7,
                  }
            }
            virtual={undefined}
        >
            <Styled(Text)
                virtual={undefined}
            />
            <Styled(Text)
                note={true}
                style={
                    Object {
                        "fontSize": 12,
                      }
                }
                virtual={undefined}
            />
        </Styled(Body)>
    </TouchableOpacity>
</Styled(List)>,
  "nodes": Array [
    <Styled(List)
      virtual={undefined}
>
      <TouchableOpacity
            activeOpacity={0.2}
            focusedOpacity={0.7}
            onPress={[Function]}
            style={
                  Object {
                        "borderBottomColor": "#d0d4db",
                        "borderBottomWidth": 1,
                        "flexDirection": "row",
                        "marginBottom": 5,
                        "paddingBottom": 5,
                      }
            }
      >
            <Styled(Thumbnail)
                  size={80}
                  source={
                        Object {
                              "uri": "",
                            }
                  }
                  square={true}
                  virtual={undefined}
            />
            <Styled(Body)
                  style={
                        Object {
                              "alignItems": "flex-start",
                              "paddingLeft": 7,
                            }
                  }
                  virtual={undefined}
            >
                  <Styled(Text)
                        virtual={undefined}
                  />
                  <Styled(Text)
                        note={true}
                        style={
                              Object {
                                    "fontSize": 12,
                                  }
                        }
                        virtual={undefined}
                  />
            </Styled(Body)>
      </TouchableOpacity>
</Styled(List)>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Detail
        onPress={[Function]}
        style={
                Object {
                        "borderBottomColor": "#d0d4db",
                        "borderBottomWidth": 1,
                        "flexDirection": "row",
                        "marginBottom": 5,
                        "paddingBottom": 5,
                      }
        }
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "onPress": [Function],
          "style": Object {
            "borderBottomColor": "#d0d4db",
            "borderBottomWidth": 1,
            "flexDirection": "row",
            "marginBottom": 5,
            "paddingBottom": 5,
          },
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Styled(List)
          virtual={undefined}
>
          <TouchableOpacity
                    activeOpacity={0.2}
                    focusedOpacity={0.7}
                    onPress={[Function]}
                    style={
                              Object {
                                        "borderBottomColor": "#d0d4db",
                                        "borderBottomWidth": 1,
                                        "flexDirection": "row",
                                        "marginBottom": 5,
                                        "paddingBottom": 5,
                                      }
                    }
          >
                    <Styled(Thumbnail)
                              size={80}
                              source={
                                        Object {
                                                  "uri": "",
                                                }
                              }
                              square={true}
                              virtual={undefined}
                    />
                    <Styled(Body)
                              style={
                                        Object {
                                                  "alignItems": "flex-start",
                                                  "paddingLeft": 7,
                                                }
                              }
                              virtual={undefined}
                    >
                              <Styled(Text)
                                        virtual={undefined}
                              />
                              <Styled(Text)
                                        note={true}
                                        style={
                                                  Object {
                                                            "fontSize": 12,
                                                          }
                                        }
                                        virtual={undefined}
                              />
                    </Styled(Body)>
          </TouchableOpacity>
</Styled(List)>,
        "_debugID": 4,
        "_renderedOutput": <Styled(List)
          virtual={undefined}
>
          <TouchableOpacity
                    activeOpacity={0.2}
                    focusedOpacity={0.7}
                    onPress={[Function]}
                    style={
                              Object {
                                        "borderBottomColor": "#d0d4db",
                                        "borderBottomWidth": 1,
                                        "flexDirection": "row",
                                        "marginBottom": 5,
                                        "paddingBottom": 5,
                                      }
                    }
          >
                    <Styled(Thumbnail)
                              size={80}
                              source={
                                        Object {
                                                  "uri": "",
                                                }
                              }
                              square={true}
                              virtual={undefined}
                    />
                    <Styled(Body)
                              style={
                                        Object {
                                                  "alignItems": "flex-start",
                                                  "paddingLeft": 7,
                                                }
                              }
                              virtual={undefined}
                    >
                              <Styled(Text)
                                        virtual={undefined}
                              />
                              <Styled(Text)
                                        note={true}
                                        style={
                                                  Object {
                                                            "fontSize": 12,
                                                          }
                                        }
                                        virtual={undefined}
                              />
                    </Styled(Body)>
          </TouchableOpacity>
</Styled(List)>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Detail
    onPress={[Function]}
    style={
        Object {
            "borderBottomColor": "#d0d4db",
            "borderBottomWidth": 1,
            "flexDirection": "row",
            "marginBottom": 5,
            "paddingBottom": 5,
          }
    }
/>,
}
`;
